# Translated from section 5.7.3 of http://fsl.cs.uiuc.edu/images/0/0c/CS422-Spring-2010-CHALLENGE.pdf

# TODO:
# - zero out store in malloc
# - bottom out store in free
# - code generation

# Access our parser
%{
  #include "bonsai/types.h"

  extern int yyparse();
  extern Node* computation;
%}

# Build Configuration
^:
  !T:
  +T:
    Agents:
      Agent:
        Threads:
          Thread:
            K:: K
            Env:
            Holds:
        Store:
        Aspect:
        Busy:
        Ptr:
        NextLoc: 0
        Me: 0
        Parent: -1
    Output::
    Messages:
    NextAgent: 1
< yyparse();
< insert(computation, $K, NULL);

# Arithmetic
-Addition:
  Value:
    Integer: A
  Value:
    Integer: B
+Value:
  Integer: S
< $S->value_type = integer;
< $S->integer_value = $A->integer_value + $B->integer_value;

-Addition:
  Value:
    Real: A
  Value:
    Real: B
+Value:
  Real: S
< $S->value_type = decimal;
< $S->decimal_value = $A->decimal_value + $B->decimal_value;

-Addition:
  Value:
    Integer: A
  Value:
    Real: B
+Value:
  Real: S
< $S->value_type = decimal;
< $S->decimal_value = $A->integer_value + $B->decimal_value;

+*: S
Addition:
  -Unevaluated::=
    *:* S
  !Evaluating:
  +Evaluating:

-Value: V
Addition:
  -Evaluating:
  +Value: V

-Multiplication:
  Value:
    Integer: A
  Value:
    Integer: B
+Value:
  Integer: P
< $P->value_type = integer;
< $P->integer_value = $A->integer_value * $B->integer_value;

-Multiplication:
  Value:
    Real: A
  Value:
    Real: B
+Value:
  Real: P
< $P->value_type = decimal;
< $P->decimal_value = $A->decimal_value * $B->decimal_value;

-Multiplication:
  Value:
    Integer: A
  Value:
    Real: B
+Value:
  Real: P
< $P->value_type = decimal;
< $P->decimal_value = $A->integer_value * $B->decimal_value;

+*: S
Multiplication:
  -Unevaluated::=
    *:* S
  !Evaluating:
  +Evaluating:

-Value: V
Multiplication:
  -Evaluating:
  +Value: V

-Division:
  Dividend:
    Value:
      Integer: A
  Divisor:
    Value:
      Integer: B
+Value:
  Integer: Q
< $Q->value_type = integer;
< $Q->integer_value = $A->integer_value / $B->integer_value;

-Division:
  Dividend:
    Value:
      Real: A
  Divisor:
    Value:
      Real: B
+Value:
  Real: Q
< $Q->value_type = decimal;
< $Q->decimal_value = $A->decimal_value / $B->decimal_value;

-Division:
  Dividend:
    Value:
      Integer: A
  Divisor:
    Value:
      Real: B
+Value:
  Real: Q
< $Q->value_type = decimal;
< $Q->decimal_value = $A->integer_value / $B->decimal_value;

-Division:
  Dividend:
    Value:
      Real: A
  Divisor:
    Value:
      Integer: B
+Value:
  Real: Q
< $Q->value_type = decimal;
< $Q->decimal_value = $A->decimal_value / $B->integer_value;

+*: S
Division:
  Dividend:
    -Unevaluated::=
      *:* S
    +Evaluating:
  Divisor:
    !Evaluating:

-Value: V
Division:
  Dividend:
    -Evaluating:
    +Value: V

+*: S
Division:
  Divisor:
    -Unevaluated::=
      *:* S
    +Evaluating:
  Dividend:
    !Evaluating:

-Value: V
Division:
  Divisor:
    -Evaluating:
    +Value: V

# Boolean Expressions
-LessThanOrEqualTo:
  Smaller:
    Value:
      Integer: A
  Larger:
    Value:
      Integer: B
+Value:
  Bool: R
< $R->value_type = integer;
< $R->integer_value = $A->integer_value <= $B->integer_value ? 1 : 0;

-LessThanOrEqualTo:
  Smaller:
    Value:
      Real: A
  Larger:
    Value:
      Real: B
+Value:
  Bool: R
< $R->value_type = integer;
< $R->integer_value = $A->decimal_value <= $B->decimal_value ? 1 : 0;

-LessThanOrEqualTo:
  Smaller:
    Value:
      Integer: A
  Larger:
    Value:
      Real: B
+Value:
  Bool: R
< $R->value_type = integer;
< $R->integer_value = $A->integer_value <= $B->decimal_value ? 1 : 0;

-LessThanOrEqualTo:
  Smaller:
    Value:
      Real: A
  Larger:
    Value:
      Integer: B
+Value:
  Bool: R
< $R->value_type = integer;
< $R->integer_value = $A->decimal_value <= $B->integer_value ? 1 : 0;

+*: S
LessThanOrEqualTo:
  Smaller:
    -Unevaluated::=
      *:* S
    +Evaluating:

-Value: V
LessThanOrEqualTo:
  Smaller:
    -Evaluating:
    +Value: V

+*: S
LessThanOrEqualTo:
  Larger:
    -Unevaluated::=
      *:* S
    +Evaluating:
  Smaller:
    Value:

-Value: V
LessThanOrEqualTo:
  Larger:
    -Evaluating:
    +Value: V

-Not:
  Value:
    Bool: 1
+Value:
  Bool: 0

-Not:
  Value:
    Bool: 0
+Value:
  Bool: 1

+*: S
Not:
  -Unevaluated::=
    *:* S
  +Evaluating:

-Value: V
Not:
  -Evaluating:
  +Value: V

-And:
  First:
    Value:
      Bool: 1
  Second:
    Unevaluated::=
      *:* S
+*: S

-And:
  First:
    Value:
      Bool: 0
+Value:
  Bool: 0

+*: S
And:
  First:
    -Unevaluated::=
      *:* S
    +Evaluating:

-Value: V
And:
  First:
    -Evaluating:
    +Value: V

# If
-If:
  Condition:
    Value:
      Bool: 1
  Then::=
    *:* S
+*: S

-If:
  Condition:
    Value:
      Bool: 0
  Else::=
    *:* S
+*: S

+*: S
If:
  Condition:
    -Unevaluated::=
      *:* S
    +Evaluating:

-Value: V
If:
  Condition:
    -Evaluating:
    +Value: V

# While
K::
  -While:
    Condition: B
    Body::=
      *:* S
  +If:
    Condition: B
    Then::
      *: S
      While:
        Condition: B
        Body::
          *: S
    Else::

# Output
Agents:
  Agent:
    Threads:
      Thread:
        K::
          -Output:
            Value: V
Output::=
  *:*
  +Value: V

Output::
  -Value:
    Integer: I
< printf("%ld\n", $I->integer_value);

Output::
  -Value:
    Real: R
< printf("%f\n", $R->decimal_value);

+*: S
Output:
  -Unevaluated::=
    *:* S
  +Evaluating:

-Value: V
Output:
  -Evaluating:
  +Value: V

# Reading from the store
Threads:
  Thread:
    K::
      -VarId: X
      +Value: V
    Env:
      Entry:
        VarId: X
        Location: L
Store:
  Entry:
    Location: L
    Value: V

# Statement Block
K::
  -Block::=
    *:* S
  +*: S
  +RestoreEnvironment: E
Env: E

K::
  -RestoreEnvironment: E
-Env:
+Env: E

# Variable declaration
Threads:
  Thread:
    K::
      Vars:
        -VarId: X
    Env:
      !Entry:
        VarId: X
      +Entry:
        VarId: X
        Location: L
Store:
  +Entry:
    Location: L
    Value:
      Integer: 0
NextLoc: L
< $L->integer_value++;

K::
  Vars:
    VarId: X
Env:
  -Entry:
    VarId: X

K:
  -Vars:=

# Side effects: increment
Threads:
  Thread:
    K::
      -Increment:
        VarId: X
      +Value:
        Integer: I2
    Env:
      Entry:
        VarId: X
        Location: L
Store:
  Entry:
    Location: L
    Value:
      Integer: I
< $I2->value_type = integer;
< $I2->integer_value = $I->integer_value++;

Threads:
  Thread:
    K::
      -Increment:
        VarId: X
      +Value:
        Real: R2
    Env:
      Entry:
        VarId: X
        Location: L
Store:
  Entry:
    Location: L
    Value:
      Real: R
< $R2->value_type = decimal;
< $R2->decimal_value = $R2->decimal_value++;

# Obtaining the reference location of a name
K::
  -Reference:
    VarId: X
  +Value:
    Integer: L
Env:
  Entry:
    VarId: X
    Location: L

# Dereferencing a location
Threads:
  Thread:
    K::
      -Dereference:
        Value:
          Integer: L
      +Value: V
Store:
  Entry:
    Location: L
    Value: V

+*: S
Dereference:
  -Unevaluated::=
    *:* S
  +Evaluating:

-Value: V
Dereference:
  -Evaluating:
  +Value: V

# Memory allocation (TODO: zero out the store)
Threads:
  Thread:
    K::
      -Malloc:
        Value:
          Integer: N
      +Value:
        Integer: L
Ptr:
  +Entry:
    Location: L
    Size: N
NextLoc: L
< $L->integer_value += $N->integer_value;

+*: S
Malloc:
  -Unevaluated::=
    *:* S
  +Evaluating:

-Value: V
Malloc:
  -Evaluating:
  +Value: V

# Free (TODO: bottom out the store)
Threads:
  Thread:
    K::
      -Free:
        Value:
          Integer: L
Ptr:
  -Entry:
    Location: L

+*: S
Free:
  -Unevaluated::=
    *:* S
  +Evaluating:

-Value: V
Free:
  -Evaluating:
  +Value: V

# Assignment
Threads:
  Thread:
    K::
      -Assignment:
        VarId: X
        Value: V
    Env:
      Entry:
        VarId: X
        Location: L
Store:
  Entry:
    Location: L
    -Value:
    +Value: V

+*: S
Assignment:
  -Unevaluated::=
    *:* S
  +Evaluating:

-Value: V
Assignment:
  -Evaluating:
  +Value: V

# Dereferencing Assignment
Threads:
  Thread:
    K::
      -Assignment:
        Dereference:
          Value:
            Integer: L
        Value: V
Store:
  Entry:
    Location: L
    -Value:
    +Value: V

+*: S
Assignment:
  Value:
  Dereference:
    -Unevaluated::=
      *:* S
    +Evaluating:

-Value: V
Assignment:
  Dereference:
    -Evaluating:
    +Value: V

# Declare aspect
Threads:
  Thread:
    K::
      -Aspect::=
        *:* S
Aspect::=
  -*:*
  +*: S

# Bind aspect to function
Threads:
  Thread:
    K::
      -LambdaAbstraction:
        Vars: V
        Body::=
          *:* B
      +Value:
        Closure:
          Vars: V
          Body::
            *: S
            *: B
          Env: E
    Env: E
Aspect::=
  *:* S

# Function application
-Application:
  ClosureWithSavedEnv:
    Vars:=
    Body::=
      *:* S
  Arguments:=
  EvaluatedArguments:=
+*: S

K::
  Application:
    -Value:
      Closure: C
    +ClosureWithSavedEnv: C
  +RestoreEnvironment: E
Env: E

Threads:
  Thread:
    K::
      Application:
        ClosureWithSavedEnv:
          Vars::
            -VarId: X
        Arguments:=
        EvaluatedArguments::
          -Value: V
    Env:
      !Entry:
        VarId: X
      +Entry:
        VarId: X
        Location: L
Store:
  +Entry:
    Location: L
    Value: V
NextLoc: L
< $L->integer_value++;

K::
  Application:
    ClosureWithSavedEnv:
      Vars:
        VarId: X
    Arguments:=
Env:
  -Entry:
    VarId: X

Application:
  !EvaluatedArguments::
  +EvaluatedArguments::

+*: S
Application:
  -Unevaluated::=
    *:* S
  +Evaluating:

-Value: V
Application:
  -Evaluating:
  +Value: V

+*: S
Application:
  !Unevaluated:
  !Evaluating:
  Arguments::
    -Unevaluated::=
      *:* S
    +Evaluating:

-Value: V
Application:
  Arguments::
    -Evaluating:
  EvaluatedArguments::=
    *:*
    +Value: V

# Tail call optimization
K::
  -RestoreEnvironment:
  RestoreEnvironment:

# Recursion
Threads:
  Thread:
    K::
      -MuConstructWithSavedEnv:
        !VarId:
        Body:
          *:* S
      +*: S

K::
  -Value:
    MuConstruct: M
  +MuConstructWithSavedEnv: M
  +RestoreEnvironment: E
Env: E

Threads:
  Thread:
    K::
      MuConstructWithSavedEnv:
        -VarId: X
        Body: B
    Env:
      !Entry:
        VarId: X
      +Entry:
        VarId: X
        Location: L
Store:
  +Entry:
    Location: L
    Value:
      MuConstruct:
        VarId: X
        Body: B
NextLoc: L
< $L->integer_value++;

K::
  MuConstructWithSavedEnv:
    VarId: X
Env:
  -Entry:
    VarId: X

# Call with current continuation (call/cc)
K::=
  -Callcc:
    Value: V
  +Application:
    Value: V
    Arguments::
      Value:
        Cc:
          Continuation::
            *: K
          Env: E
  *:* K
Env: E

+*: S
Callcc:
  -Unevaluated::=
    *:* S
  +Evaluating:

-Value: V
Callcc:
  -Evaluating:
  +Value: V

K::=
  -Application:
    Value:
      Cc:
        Continuation::
          *:* K
        Env: E
    Arguments::=
      Value: V
  -*:*
  +Value: V
  +*: K
-Env:
+Env: E

# Sequential Non-determinism
K::
  -RandomBool:
  +Value:
    Bool: 1

K::
  -RandomBool:
  +Value:
    Bool: 0

# Threads
Thread:
  K::
    -Spawn::=
      *:* S
  Env: E
+Thread:
  K::
    *: S
  Env: E
  Holds:

-Thread:
  K::=
  Holds:=

Threads:
  Thread:
    K::=
    Holds:
      -Entry:
        Value: V
Busy:
  -Value: V

# Thread Synchronization
K::
  -Acquire:
    Value: V
Holds:
  Entry:
    Value: V
    Extras:
      +Extra:

Threads:
  Thread:
    K::
      -Acquire:
        Value: V
    Holds:
      +Entry:
        Value: V
        Extras:
Busy:
  !Value: V
  +Value: V

+*: S
Acquire:
  -Unevaluated::=
    *:* S
  +Evaluating:

-Value: V
Acquire:
  -Evaluating:
  +Value: V

K::
  -Release:
    Value: V
Holds:
  Entry:
    Value: V
    Extras:
      -Extra:

Threads:
  Thread:
    K::
      -Release:
        Value: V
    Holds:
      -Entry:
        Value: V
        Extras:=
Busy:
  -Value: V

+*: S
Release:
  -Unevaluated::=
    *:* S
  +Evaluating:

-Value: V
Release:
  -Evaluating:
  +Value: V

# Rendez-vous synchronization
Thread:
  K::
    -Rendezvous:
      Value: V
Thread:
  K::
    -Rendezvous:
      Value: V

+*: S
Rendezvous:
  -Unevaluated::=
    *:* S
  +Evaluating:

-Value: V
Rendezvous:
  -Evaluating:
  +Value: V

# Agents
Agents:
  Agent:
    Threads:
      Thread:
        K::
          -NewAgent::
            *:* S
          +Value:
            Integer: N
    Me: M
  +Agent:
    Threads:
      Thread:
        K::
          *: S
        Env:
        Holds:
    Busy:
    Me: N
    Parent: M
    Store:
    NextLoc: 0
    Aspect::
NextAgent: N
< $N->integer_value++;

-Agent:
  Threads:=

Threads:
  Thread:
    K::
      -Me:
      +Value:
        Integer: M
Me: M

Threads:
  Thread:
    K::
      -Parent:
      +Value:
        Integer: N
Parent: N

Agents:
  Agent:
    Threads:
      Thread:
        K::
          -SendAsynch:
            Receiver:
              Value:
                Integer: N
            Message:
              Value: V
    Me: M
Messages:
  +Entry:
    Sender: M
    Receiver: N
    Value: V

+*: S
SendAsynch:
  Receiver:
    -Unevaluated::=
      *:* S
    +Evaluating:
  Message:
    !Evaluating:

-Value: V
SendAsynch:
  Receiver:
    -Evaluating:
    +Value: V

+*: S
SendAsynch:
  Message:
    -Unevaluated::=
      *:* S
    +Evaluating:
  Receiver:
    !Evaluating:

-Value: V
SendAsynch:
  Message:
    -Evaluating:
    +Value: V

Agents:
  Agent:
    Threads:
      Thread:
        K::
          -ReceiveFrom:
            Value:
              Integer: N
          +Value: V
    Me: M
Messages:
  -Entry:
    Sender: N
    Receiver: M
    Value: V

+*: S
ReceiveFrom:
  -Unevaluated::=
    *:* S
  +Evaluating:

-Value: V
ReceiveFrom:
  -Evaluating:
  +Value: V

Agents:
  Agent:
    Threads:
      Thread:
        K::
          -Receive:
          +Value: V
    Me: M
Messages:
  -Entry:
    Receiver: M
    Value: V

Agent:
  Threads:
    Thread:
      K::
        -SendSynch:
          Receiver:
            Value:
              Integer: N
          Message:
            Value: V
  Me: M
Agent:
  Threads:
    Thread:
      K::
        -ReceiveFrom:
          Value:
            Integer: M
        +Value: V
  Me: N

Agent:
  Threads:
    Thread:
      K::
        -SendSynch:
          Receiver:
            Value:
              Integer: N
          Message:
            Value: V
Agent:
  Threads:
    Thread:
      K::
        -Receive:
        +Value: V
  Me: N

+*: S
SendSynch:
  Receiver:
    -Unevaluated::=
      *:* S
    +Evaluating:
  Message:
    !Evaluating:

-Value: V
SendSynch:
  Receiver:
    -Evaluating:
    +Value: V

+*: S
SendSynch:
  Message:
    -Unevaluated::=
      *:* S
    +Evaluating:
  Receiver:
    !Evaluating:

-Value: V
SendSynch:
  Message:
    -Evaluating:
    +Value: V

# Abrupt Termination
-K::
  HaltThread:
+K::

-Threads:
  Thread:
    K::
      HaltAgent:
+Threads:

-Agents:
  Agent:
    Threads:
      Thread:
        K::
          HaltSystem:
+Agents:

# Code Generation
K::
  -Quote:: Q
  +Quoting::
    HeatingQuote:: Q

K::
  -Quoting::=
    Code: C
  +Value:
    Code: C

Quoting::
  *:*
  -HeatingQuote::=
    Unquote::=
      *:* Q
  +*: Q

-HeatingQuote::=
+Code::

+HeatingQuote::
  *: Q
HeatingQuote::
  -*: Q
  *:

Code::=
  *:*
  +*: Q
-Code::=
  *:* Q

-HeatingQuote::=
  *:= L
    *:* S
+BoxedNode:
  Label:
    *: L
  Body::
    HeatingQuote::
      *: S

BoxedNode:
  Label:
    *:
      -*:*

BoxedNode:
  -Label:=
    *:= L
+UnboxingNode:
  *: L

BoxedNode:
  !Label:
  -Body::=
    Code::=
      *:* S
UnboxingNode:
  *:
    +*: S

-BoxedNode:
  !Label:
  !Body:
-UnboxingNode:
  *: S
+Code::
  *: S

+*: S
Eval:
  -Unevaluated::=
    -*:* S
  +Evaluating:

-Value:
  Code::=
    *:* S
-Eval:
  Evaluating:
+*: S
